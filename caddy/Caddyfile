# ##### CADDYFILE #########################################
# Ref: https://caddyserver.com/docs/caddyfile/options

# ===== GLOBAL OPTIONS BLOCK ==============================
{
	# ----- General Options -------------------------------
	debug

	# ----- TLS Settings ----------------------------------
	email {$EMAIL_FOR_ACME}
	# Staging URL for Let's Encrypt is below. Uncomment for testing.
	# acme_ca https://acme-staging-v02.api.letsencrypt.org/directory
	# local_certs # issue internal certs (for local / dev environments)

	# ----- Caddy Security Settings -----------------------

	order authenticate before respond
	order authorize before basicauth

	security {
		local identity store localdb {
			realm local
			path /data/auth/users.json
		}

		authentication portal myportal {
			# Pick one of the below 'crypto default token lifetime' options
			# crypto default token lifetime 3600 # Token lifetime 1 hour
			# crypto default token lifetime 86400 # Token lifetime 1 day
			crypto default token lifetime 604800 # Token lifetime 7 days

			crypto key sign-verify {env.JWT_SHARED_KEY}
			cookie domain {$DOMAIN1}
			enable identity store localdb
			ui {
				links {
					"Home" https://{$DOMAIN1} icon "las la-home"
					"My Identity" "/whoami" icon "las la-user"
				}
			}
			transform user {
				match origin local
				action add role authp/user
				ui link "Portal Settings" /settings icon "las la-cog"
			}
		}

		authorization policy main_policy {
			set auth url https://auth.{$DOMAIN1}
			allow roles authp/admin authp/user
			crypto key verify {env.JWT_SHARED_KEY}
			acl rule {
				comment allow users
				match role authp/user
				allow stop log info
			}
			acl rule {
				comment default deny
				match any
				deny log warn
			}
		}
	}
	# ~~~ end caddy security ~~~
}

# ===== SNIPPETS ==========================================
# (redirect) {
# 	@http {
# 		protocol http
# 	}
# 	redir @http https://{host}{uri}
# }

(tls_CFDNS) {
	tls {
		dns cloudflare {$CF_API_TOKEN}
		resolvers 1.1.1.1
	}
}

(local_only) {
	@local_subnets {
		not remote_ip private_ranges
	}
	respond @local_subnets "Unauthorized" 403
}

(handle_errors) {
	rewrite * /{err.status_code}.html
}

# ===== SITE BLOCKS =======================================

# ----- Initial Caddy Testing -----------------------------

# # simple test
# test1.{$DOMAIN1} {
	# respond "Hello, World!"
# }
# 
# # testing to nginx
# test2.{$DOMAIN1} {
	# reverse_proxy localhost:8080 # nginx
# }
# 
# # testing local_only restriction
# test3.{$DOMAIN1} {
	# import local_only
	# reverse_proxy localhost:8080 # nginx
# }

# ----- Caddy-Security Auth & Portal ----------------------
auth.{$DOMAIN1} {
	import tls_CFDNS
	route {
		authenticate with myportal
	}
}

# ----- STARTPAGE -----------------------------------------
{$DOMAIN1}, www.{$DOMAIN1} {
	import tls_CFDNS
	route {
		authorize with main_policy
		reverse_proxy homepage:5005 # flame dashboard
	}
}

# ----- BUDIBASE ------------------------------------------
# budibase.{$DOMAIN1} {
	# import tls_CFDNS
	# route {
		# authorize with main_policy
		# reverse_proxy bbproxy:10000
	# }
# }

# ----- CYBERCHEF -----------------------------------------
cyberchef.{$DOMAIN1} {
	import tls_CFDNS
	route {
		authorize with main_policy
		reverse_proxy cyberchef:8000
	}
}

# ----- NEXTCLOUD -----------------------------------------
nextcloud.{$DOMAIN1} {
	import tls_CFDNS
    header Strict-Transport-Security max-age=31536000;
    redir /.well-known/carddav /remote.php/carddav 301
    redir /.well-known/caldav /remote.php/caldav 301
    redir /.well-known/webfinger /remote.php/webfinger 301
    redir /.well-known/nodeinfo /remote.php/nodeinfo 301

    reverse_proxy nextcloud-app:80

    @forbidden {
            path /.htaccess
            path /data/*
            path /config/*
            path /db_structure
            path /.xml
            path /README
            path /3rdparty/*
            path /lib/*
            path /templates/*
            path /occ
            path /console.php
    }

    respond @forbidden 404

}

# ----- COLLABORA OFFICE ----------------------------------

office.${DOMAIN1} {
    import tls_CFDNS
    respond "collabora test"
    # reverse_proxy nc2-collabora:9980 {
        # # header_up Host "nextcloud.${DOMAIN1}"
        # transport http {
            # tls_insecure_skip_verify
        # }
    # }
    # @collabora {
        # path /loleaflet/* # Loleaflet is the client part of LibreOffice Online
        # path /hosting/discovery # WOPI discovery URL
        # path /hosting/capabilities # Show capabilities as json
        # path /lool/* # Main websocket, uploads/downloads, presentations
    # }
# 
    # reverse_proxy @collabora nc2-collabora:9980 {
        # header_up Host "nextcloud.${DOMAIN1}"
        # transport http {
            # tls_insecure_skip_verify
        # }
    # }

}

# ----- PHOTOPRISM -----------------------------------------
photos.{$DOMAIN1} {
	import tls_CFDNS
	route {
		authorize with main_policy
		reverse_proxy photoprism:2342
	}
}

# ----- POSTGRESQL & PGADMIN ------------------------------
# pgadmin.{$DOMAIN1} {
	# import tls_CFDNS
	# route {
		# authorize with main_policy
		# respond "pgadmin"
	# }
# }

# ----- GHOST ------------------------------
ghost.{$DOMAIN1} {
	import tls_CFDNS
	route {
		# authorize with main_policy
		reverse_proxy ghost-app:2368
	}
}

ghost-admin.{$DOMAIN1} {
	import tls_CFDNS
	route {
		# authorize with main_policy
		rewrite / /ghost/{uri}
		reverse_proxy ghost-app:2368
   	}
}

# ===== LAN-ONLY SERVICES ON SECONDARY DOMAIN =============
# {$DOMAIN2} {
	# import tls_CFDNS
	# import local_only
	# # respond "Hello World"
	# redir https://{$DOMAIN1}
# }
# 
# *.{$DOMAIN2} {
	# import tls_CFDNS
	# import local_only
# 
	# @proxmox host proxmox.{$DOMAIN2}
	# handle @proxmox {
		# reverse_proxy https://192.168.1.23:8006 {
			# transport http {
				# tls_insecure_skip_verify
			# }
		# }
	# }
# 
	# # @omv host omv.{$DOMAIN2}
	# # handle @omv {
		# # reverse_proxy 192.168.1.103
	# # }
# 
	# # Fallback for otherwise unhandled domains
	# handle {
		# respond "404" 404
	# }
# }
